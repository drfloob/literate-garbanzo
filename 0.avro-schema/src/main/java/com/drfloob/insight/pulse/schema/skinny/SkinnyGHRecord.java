/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.drfloob.insight.pulse.schema.skinny;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SkinnyGHRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6830143729490453407L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SkinnyGHRecord\",\"namespace\":\"com.drfloob.insight.pulse.schema.skinny\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"description\":\"https://developer.github.com/v3/activity/events/types/\"},{\"name\":\"created_at\",\"type\":\"long\",\"logical\":\"timestamp-millis\",\"description\":\"Timestamp of associated event\"},{\"name\":\"id\",\"type\":\"string\",\"description\":\"Unique event identifier\"},{\"name\":\"fromUser\",\"type\":\"string\",\"description\":\"Unique user identifier for user that originated this event\"},{\"name\":\"toUser\",\"type\":\"string\",\"description\":\"Unique user identifier for recipients of this event\"},{\"name\":\"url\",\"type\":\"string\",\"description\":\"Associated Event URL\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public long created_at;
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence fromUser;
  @Deprecated public java.lang.CharSequence toUser;
  @Deprecated public java.lang.CharSequence url;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SkinnyGHRecord() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param created_at The new value for created_at
   * @param id The new value for id
   * @param fromUser The new value for fromUser
   * @param toUser The new value for toUser
   * @param url The new value for url
   */
  public SkinnyGHRecord(java.lang.CharSequence type, java.lang.Long created_at, java.lang.CharSequence id, java.lang.CharSequence fromUser, java.lang.CharSequence toUser, java.lang.CharSequence url) {
    this.type = type;
    this.created_at = created_at;
    this.id = id;
    this.fromUser = fromUser;
    this.toUser = toUser;
    this.url = url;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return created_at;
    case 2: return id;
    case 3: return fromUser;
    case 4: return toUser;
    case 5: return url;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: created_at = (java.lang.Long)value$; break;
    case 2: id = (java.lang.CharSequence)value$; break;
    case 3: fromUser = (java.lang.CharSequence)value$; break;
    case 4: toUser = (java.lang.CharSequence)value$; break;
    case 5: url = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return The value of the 'created_at' field.
   */
  public java.lang.Long getCreatedAt() {
    return created_at;
  }

  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.Long value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'fromUser' field.
   * @return The value of the 'fromUser' field.
   */
  public java.lang.CharSequence getFromUser() {
    return fromUser;
  }

  /**
   * Sets the value of the 'fromUser' field.
   * @param value the value to set.
   */
  public void setFromUser(java.lang.CharSequence value) {
    this.fromUser = value;
  }

  /**
   * Gets the value of the 'toUser' field.
   * @return The value of the 'toUser' field.
   */
  public java.lang.CharSequence getToUser() {
    return toUser;
  }

  /**
   * Sets the value of the 'toUser' field.
   * @param value the value to set.
   */
  public void setToUser(java.lang.CharSequence value) {
    this.toUser = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Creates a new SkinnyGHRecord RecordBuilder.
   * @return A new SkinnyGHRecord RecordBuilder
   */
  public static SkinnyGHRecord.Builder newBuilder() {
    return new SkinnyGHRecord.Builder();
  }

  /**
   * Creates a new SkinnyGHRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SkinnyGHRecord RecordBuilder
   */
  public static SkinnyGHRecord.Builder newBuilder(SkinnyGHRecord.Builder other) {
    return new SkinnyGHRecord.Builder(other);
  }

  /**
   * Creates a new SkinnyGHRecord RecordBuilder by copying an existing SkinnyGHRecord instance.
   * @param other The existing instance to copy.
   * @return A new SkinnyGHRecord RecordBuilder
   */
  public static SkinnyGHRecord.Builder newBuilder(SkinnyGHRecord other) {
    return new SkinnyGHRecord.Builder(other);
  }

  /**
   * RecordBuilder for SkinnyGHRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SkinnyGHRecord>
    implements org.apache.avro.data.RecordBuilder<SkinnyGHRecord> {

    private java.lang.CharSequence type;
    private long created_at;
    private java.lang.CharSequence id;
    private java.lang.CharSequence fromUser;
    private java.lang.CharSequence toUser;
    private java.lang.CharSequence url;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(SkinnyGHRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fromUser)) {
        this.fromUser = data().deepCopy(fields()[3].schema(), other.fromUser);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.toUser)) {
        this.toUser = data().deepCopy(fields()[4].schema(), other.toUser);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.url)) {
        this.url = data().deepCopy(fields()[5].schema(), other.url);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SkinnyGHRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(SkinnyGHRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fromUser)) {
        this.fromUser = data().deepCopy(fields()[3].schema(), other.fromUser);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.toUser)) {
        this.toUser = data().deepCopy(fields()[4].schema(), other.toUser);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.url)) {
        this.url = data().deepCopy(fields()[5].schema(), other.url);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public java.lang.Long getCreatedAt() {
      return created_at;
    }

    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder setCreatedAt(long value) {
      validate(fields()[1], value);
      this.created_at = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder clearCreatedAt() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromUser' field.
      * @return The value.
      */
    public java.lang.CharSequence getFromUser() {
      return fromUser;
    }

    /**
      * Sets the value of the 'fromUser' field.
      * @param value The value of 'fromUser'.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder setFromUser(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.fromUser = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fromUser' field has been set.
      * @return True if the 'fromUser' field has been set, false otherwise.
      */
    public boolean hasFromUser() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fromUser' field.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder clearFromUser() {
      fromUser = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'toUser' field.
      * @return The value.
      */
    public java.lang.CharSequence getToUser() {
      return toUser;
    }

    /**
      * Sets the value of the 'toUser' field.
      * @param value The value of 'toUser'.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder setToUser(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.toUser = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'toUser' field has been set.
      * @return True if the 'toUser' field has been set, false otherwise.
      */
    public boolean hasToUser() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'toUser' field.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder clearToUser() {
      toUser = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.url = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public SkinnyGHRecord.Builder clearUrl() {
      url = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public SkinnyGHRecord build() {
      try {
        SkinnyGHRecord record = new SkinnyGHRecord();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.created_at = fieldSetFlags()[1] ? this.created_at : (java.lang.Long) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.fromUser = fieldSetFlags()[3] ? this.fromUser : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.toUser = fieldSetFlags()[4] ? this.toUser : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.url = fieldSetFlags()[5] ? this.url : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
